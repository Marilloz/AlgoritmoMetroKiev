from numpy import *
from Librerias import pair, nodo, aux_ret

# Distancia
# Cantidad De Estaciones
# Transbordos
n_paradas = 52

nombre_paradas = {110: "Akademmistechko", 111: "Zhytomyrska", 112: "Sviatoshyn", 113: "Nyvky", 114: "Beresteiska",
                  115: "Shuliavska", 116: "Politekhnichnyl instytut", 117: "Vokzalna", 118: "Universytet",
                  119: "Teatralna", 120: "Khreschchatyk", 121: "Arsenalna", 122: "Dnipro", 123: "Hidropark",
                  124: "Livoberezhna", 125: "Darnytsia", 126: "Chernihivska", 127: "Lisova", 210: "Heroiv Dnipra",
                  211: "Minska", 212: "Obolon", 213: "Petrivka", 214: "Tarasa Shevchenka", 215: "Kontraktova ploshcha",
                  216: "Poshtova ploshcha", 217: "Maidan Nezalezhnosti", 218: "Ploshcha Lva Tolstoho",
                  219: "Olimpiiska", 220: "Palats Ukrania", 221: "Lybidska", 222: "Demiivska", 223: "Holosiivska",
                  224: "Vasylkivska", 225: "Vystavkovyi tsentr", 226: "Ipodrom", 227: "Teremky", 310: "Syrets",
                  311: "Dorohozhychi", 312: "Lukianivska", 314: "Zoloti vorota", 315: "Palats sportu", 316: "Klovska",
                  317: "Pecherska", 318: "Dryzhby narodiv", 319: "Vyduychi", 321: "Slavutych", 322: "Osokorky",
                  323: "Pozniaky", 324: "Kharkivska", 325: "Vyrlytsia", 326: "Boryspilska", 327: "Chervonyi khutir"}
cod_paradas = [110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 210, 211, 212,
               213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 310, 311, 312, 314, 315, 316,
               317, 318, 319, 321, 322, 323, 324, 325, 326, 327]
heuristica = []
for i in range(52):
    lista = []
    heuristica.append(lista)
# TODO Heur√≠stica
heuristica[0] = [0, 1210, 2630, 3560, 4540, 6720, 7880, 9910, 10860, 11560, 12040, 13810, 14700, 15850, 17270, 18290,
                 19490, 20560, 12020, 11430, 10910, 10390, 10570, 11330, 12000, 12190, 11880, 12040, 12690, 13300,
                 13270, 13190, 12390, 12630, 12720, 12940, 5650, 6720, 9110, 11530, 11970, 12880, 13710, 14600, 16160,
                 19350, 20060, 21160, 22220, 23140, 24300, 24930]
heuristica[1] = [1210, 0, 1780, 2770, 3780, 5890, 7020, 8970, 9960, 10700, 11180, 12950, 13830, 15000, 16480, 17520,
                 18740, 19850, 11990, 11290, 10660, 9930, 9990, 10640, 11260, 11350, 10960, 11060, 11660, 12240, 12150,
                 12050, 11220, 11400, 11480, 11720, 5280, 6230, 8380, 10680, 11030, 11970, 12710, 13580, 15080, 18300,
                 19030, 20130, 21230, 22160, 23340, 23990]
heuristica[2] = [-1, -1, 0, 981, 1990, 4120, 5270, 7270, 8240, 8960, 9420, 11200, 12080, 13250, 14700, 15740, 16970,
                 18060, 10520, 9750, 9010, 8210, 8210, 8850, 9470, 9570, 9250, 9410, 10060, 10690, 10700, 10700, 9960,
                 10410, 10600, 11040, 3650, 4490, 6600, 8940, 9340, 10260, 11070, 11970, 13550, 16740, 17430, 18530,
                 19580, 20430, 21660, 22300]
heuristica[3] = [-1, -1, -1, 0, 1010, 3170, 4330, 6360, 7300, 8020, 8480, 10260, 11160, 12290, 13740, 14770, 15990,
                 17080, 9770, 8960, 8140, 7260, 7240, 7880, 8500, 8620, 8330, 8540, 9230, 9890, 9970, 10040, 9400, 9940,
                 10190, 10780, 2850, 3580, 5630, 8000, 8430, 9360, 10190, 11140, 12790, 15920, 16590, 17660, 18700,
                 19540, 20770, 21390]
heuristica[4] = [-1, -1, -1, -1, 0, 2200, 3360, 5440, 6350, 7050, 7490, 9280, 10170, 11300, 14740, 13770, 14980, 16070,
                 9030, 8140, 7330, 6340, 6260, 6860, 7480, 7660, 7370, 7620, 8360, 9070, 9230, 9370, 8840, 9520, 9860,
                 10560, 2180, 2680, 4610, 7010, 7480, 8390, 9270, 10230, 11920, 15040, 15720, 16770, 17780, 18670,
                 19820, 20430]
heuristica[5] = [-1, -1, -1, -1, -1, 0, 1160, 3260, 4140, 4850, 5310, 7090, 7980, 9130, 10590, 11630, 12860, 13990,
                 8390, 7350, 6310, 4970, 4480, 4870, 5390, 5460, 5110, 5470, 6270, 7030, 7320, 7610, 7330, 8240, 8760,
                 9700, 2740, 2140, 2590, 4810, 5270, 6190, 7100, 8100, 9840, 12920, 13560, 14590, 15590, 16480, 17640,
                 18230]
heuristica[6] = [-1, -1, -1, -1, -1, -1, 0, 2120, 2990, 3700, 4160, 5940, 6820, 7990, 9480, 10540, 11790, 12920, 8330,
                 7210, 6100, 4550, 3780, 3960, 4350, 4330, 4010, 4330, 5180, 5970, 6360, 6730, 6640, 7700, 8280, 9370,
                 3610, 2720, 1770, 3680, 4110, 5030, 5960, 6970, 8750, 11800, 12430, 13440, 14440, 15310, 16480, 17070]
heuristica[7] = [-1, -1, -1, -1, -1, -1, -1, 0, 1060, 1850, 2410, 4050, 4910, 6180, 7750, 8860, 10150, 11320, 9070,
                 7910, 6720, 5010, 2140, 3270, 3150, 2610, 2010, 2210, 3100, 3930, 4490, 5050, 5340, 6610, 7350, 8630,
                 5640, 4610, 2250, 1880, 2100, 3000, 3850, 4860, 6650, 9680, 10310, 11330, 12350, 13230, 14420, 15040]
heuristica[8] = [-1, -1, -1, -1, -1, -1, -1, -1, 0, 789, 1360, 3010, 3880, 5130, 6690, 7800, 9900, 10260, 8840, 7680,
                 6490, 4780, 3420, 2630, 2270, 1560, 1030, 1590, 2680, 3560, 4370, 5100, 5670, 7030, 7830, 9190, 6300,
                 5180, 2480, 824, 1120, 2050, 3050, 4190, 6080, 8950, 9540, 10500, 11470, 12330, 13500, 14080]
heuristica[9] = [-1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 581, 2250, 3130, 4350, 5900, 7010, 8300, 9470, 8750, 7600, 6430,
                 4760, 3350, 2360, 1730, 786, 543, 1500, 2630, 3490, 4450, 5290, 6040, 7430, 8270, 9670, 6850, 5690,
                 2900, 118, 689, 1440, 2580, 3810, 5740, 8460, 9010, 9920, 10850, 11680, 12830, 13390]
heuristica[10] = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1790, 2670, 8830, 5360, 6460, 7740, 8910, 8570, 7430, 6290,
                  4670, 3270, 2160, 1350, 205, 838, 1820, 2880, 3700, 4730, 5630, 6470, 7880, 8730, 10150, 7170, 8980,
                  3170, 534, 867, 1310, 2510, 3770, 5710, 8280, 8790, 9630, 10520, 11320, 12450, 12980]
heuristica[11] = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 881, 2130, 3750, 4880, 6180, 7380, 9510, 8440, 7380,
                  5930, 4620, 3420, 2430, 1650, 2060, 2500, 3050, 3570, 4750, 5760, 6920, 8340, 9230, 10700, 8920, 7730,
                  4930, 2260, 1990, 1280, 1820, 2890, 4670, 6780, 7220, 7960, 8800, 9570, 10680, 11200]
heuristica[12] = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1350, 2990, 4140, 5440, 6640, 10020, 8990, 7980,
                  6620, 5360, 4160, 3180, 2530, 2910, 3200, 3530, 3880, 5050, 6070, 7330, 8730, 9640, 11110, 9790, 8590,
                  5800, 3140, 2830, 2010, 2090, 2840, 4380, 6140, 6510, 7180, 7970, 8720, 9820, 10320]
heuristica[13] = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1640, 2790, 4090, 5290, 10160, 9220, 8320,
                  7150, 6040, 4910, 4000, 3660, 4200, 4550, 4840, 5110, 6250, 7270, 8590, 9970, 10880, 12350, 10760,
                  9550, 6810, 4340, 4130, 3350, 3360, 3870, 5040, 6080, 6290, 6730, 7330, 7960, 8980, 9380]
heuristica[14] = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1140, 2440, 3640, 10550, 9730, 8970, 8050,
                  7120, 6080, 5280, 5170, 5800, 6190, 6460, 6670, 7780, 8790, 10150, 11510, 12420, 13890, 12030, 10820,
                  8170, 5890, 5740, 4990, 4970, 5310, 6170, 6420, 6430, 6520, 6860, 7290, 8160, 8400]
heuristica[15] = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1300, 2500, 10960, 10230, 9570, 8810,
                  7980, 7020, 6280, 6270, 6930, 7340, 7590, 7780, 8870, 9870, 11250, 12600, 13500, 14980, 12960, 11760,
                  9170, 6990, 6860, 6130, 6100, 6380, 7070, 6890, 6760, 6630, 6750, 7010, 7740, 7840]
heuristica[16] = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1200, 11630, 10990, 10430, 9810,
                  9090, 8180, 7490, 7550, 8220, 8640, 8880, 9030, 10100, 11090, 12490, 13820, 14720, 16190, 14100,
                  12910, 10380, 8270, 8160, 7430, 7370, 7600, 8130, 7520, 7260, 6890, 6760, 6820, 7370, 7300]
heuristica[17] = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 12220, 11670, 11200, 10720,
                  10090, 9230, 8590, 8710, 9410, 9840, 10080, 10220, 11290, 12270, 13680, 15000, 15910, 17370, 15120,
                  13930, 11470, 9440, 9350, 8630, 8580, 8770, 9230, 8340, 8000, 7450, 7130, 7010, 7360, 7110]
heuristica[18] = [12020, 11990, 10520, 9770, 9050, 8410, 8330, 9070, 8840, 8750, 8570, 9490, 10030, 10170, 10560, 10970,
                  -1, -1, 0, 1170, 2360, 4080, 5440, 6420, 7290, 8500, 9280, 10250, 11370, 12240, 13180, 13960, 14410,
                  15670, 16390, 17600, 6920, 6500, 6930, 8500, 9350, 9820, 11000, 12250, 14140, 16140, 16430, 16890,
                  17380, 17860, 18670, 18810]
heuristica[19] = [11430, 11290, 9750, 8960, 8160, 7360, 7220, 7910, 7700, 7610, 7440, 8440, 9000, 9220, 9730, 10240,
                  10980, 11650, 1170, 0, 1180, 2920, 4280, 5280, 6170, 7380, 8140, 9110, 10230, 11100, 12030, 12800,
                  13260, 14520, 15240, 16460, 6100, 5520, 5830, 7500, 8210, 8710, 9890, 11170, 13070, 15120, 15460,
                  15960, 16490, 17030, 17890, 18080]
heuristica[20] = [10910, 10660, 9010, 8140, 7350, 6320, 6090, 6720, 6500, 6430, 6270, 7360, 7970, 8310, 8970, 9570,
                  10420, 11200, 2360, 1180, 0, 1720, 3090, 4130, 5060, 6240, 6960, 7920, 9040, 9910, 10840, 11600,
                  12050, 13320, 14050, 15270, 5390, 4670, 4610, 6310, 7030, 7560, 8750, 10010, 11930, 14110, 14470,
                  15030, 15630, 16200, 17110, 17350]
heuristica[21] = [10390, 9930, 8210, 7260, 6340, 4970, 4550, 5010, 4790, 4760, 4670, 5920, 6630, 7160, 8050, 8810, 9810,
                  10720, -1, -1, 1720, 0, 1410, 2560, 3540, 4650, 5310, 6240, 7370, 8250, 9140, 9900, 10340, 11620,
                  12350, 13590, 4710, 3720, 2940, 4640, 5370, 5970, 7170, 8420, 10360, 12710, 13120, 13770, 14470,
                  15110, 16110, 16430]
heuristica[22] = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1200, 2200,
                  3260, 3890, 4840, 5970, 6840, 7750, 8520, 9040, 10350, 11110, 12400, 5030, 3860, 2010, 3240, 3970,
                  4570, 5780, 7040, 8970, 11400, 11840, 12550, 13300, 13990, 15020, 15400]
heuristica[23] = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 993,
                  2120, 2880, 3850, 4970, 5820, 6800, 7640, 8310, 9670, 10460, 11810, 5940, 4730, 2290, 2250, 2940,
                  3450, 4630, 5880, 7830, 10210, 10630, 11340, 12130, 12830, 13870, 14280]
heuristica[24] = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0,
                  1250, 2160, 3160, 4230, 5040, 6090, 6980, 7770, 9170, 10010, 11400, 6770, 5540, 2890, 1640, 2210,
                  2540, 3730, 4980, 6890, 9210, 9650, 10370, 11150, 11870, 12930, 13370]
heuristica[25] = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0,
                  1010, 1960, 3000, 3800, 4860, 5770, 6630, 8050, 8910, 10330, 7280, 6090, 3290, 736, 1020, 1320, 2530,
                  3790, 5720, 8220, 8720, 9540, 10420, 11210, 12330, 12850]
heuristica[26] = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                  -1, 0, 1000, 2100, 2950, 3940, 4810, 5620, 7040, 7890, 9320, 7300, 6150, 3380, 664, 97, 1020, 2080,
                  3280, 5200, 7980, 8550, 9470, 10440, 11300, 12470, 13060]
heuristica[27] = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                  -1, -1, 0, 1130, 2010, 2940, 3820, 4690, 6100, 6960, 8410, 7810, 6720, 4070, 1630, 952, 1220, 1660,
                  2650, 4490, 7470, 8100, 9130, 10160, 11070, 12280, 12930]
heuristica[28] = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                  -1, -1, -1, 0, 882, 1860, 2800, 3870, 5290, 6180, 7650, 8740, 7700, 5130, 2740, 2040, 1910, 1510,
                  1940, 3580, 6700, 7380, 8500, 9610, 10570, 11800, 12520]
heuristica[29] = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                  -1, -1, -1, -1, 0, 1180, 2200, 3480, 4860, 5770, 7250, 9560, 8530, 6010, 3600, 2880, 2590, 1800, 1580,
                  2850, 6070, 6790, 7970, 9120, 10120, 11360, 12140]
heuristica[30] = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                  -1, -1, -1, -1, -1, 0, 1020, 2400, 3730, 4630, 6110, 9970, 9030, 6690, 4560, 3890, 3730, 2980, 2520,
                  3110, 6350, 7120, 8390, 9600, 10630, 11890, 12720]
heuristica[31] = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                  -1, -1, -1, -1, -1, -1, 0, 1490, 2730, 3630, 5110, 10310, 9450, 7300, 5410, 4770, 4700, 4000, 3490,
                  3740, 6860, 7660, 8960, 10200, 11260, 12520, 13390]
heuristica[32] = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                  -1, -1, -1, -1, -1, -1, -1, 0, 1430, 2310, 3790, 10070, 9340, 7550, 6160, 5610, 5750, 5250, 4920,
                  5210, 8270, 9080, 10400, 11650, 12710, 13960, 14850]
heuristica[33] = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                  -1, -1, -1, -1, -1, -1, -1, -1, 0, 898, 2380, 10950, 10340, 8760, 7550, 7020, 7170, 6650, 6230, 6260,
                  9110, 9930, 11270, 12530, 13610, 14850, 15780]
heuristica[34] = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                  -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1480, 11410, 10860, 9450, 8380, 7880, 8050, 7550, 7130, 7090,
                  9850, 10670, 12010, 13280, 14360, 15590, 16540]
heuristica[35] = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 12280, 11840, 10660, 9780, 9300, 9520, 9030, 8600, 8470,
                  11110, 11910, 13260, 14520, 15610, 16830, 17800]
heuristica[36] = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1220, 4010, 6770, 7400, 8300, 9340, 10480, 12290,
                  15250, 15840, 16780, 17700, 18480, 19600, 20100]
heuristica[37] = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 2860, 5660, 6300, 7250, 8250, 9440, 11280, 14220,
                  15660, 16610, 17410, 17300, 18350, 18890]
heuristica[38] = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 2840, 3490, 4360, 5470, 6660, 8580, 11390,
                  11940, 12850, 13750, 14510, 15630, 16130]
heuristica[39] = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 713, 1510, 2690, 3910, 5840, 8550, 9120,
                  10000, 10900, 11740, 12860, 13430]
heuristica[40] = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 930, 2000, 3220, 5140, 7880, 8460,
                  9400, 10360, 11220, 12370, 12960]
heuristica[41] = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1210, 2470, 4410, 7020, 7570, 8480,
                  9440, 10270, 11440, 12040]
heuristica[42] = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1270, 3210, 5920, 6510, 7510,
                  8520, 9410, 10620, 11280]
heuristica[43] = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1930, 4820, 5490, 6580,
                  7700, 8660, 9860, 10600]
heuristica[44] = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 3210, 4020, 5270, 6510,
                  7550, 8790, 9660]
heuristica[45] = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 817, 2160, 3430,
                  4500, 5740, 6680]
heuristica[46] = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1350, 2620,
                  3690, 4920, 5880]
heuristica[47] = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1290, 2300,
                  3600, 4540]
heuristica[48] = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1050,
                  2310, 3270]
heuristica[49] = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0,
                  1250, 2200]
heuristica[50] = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0,
                  1070]
heuristica[51] = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                  -1, 0]

conexiones = full(shape=(n_paradas, n_paradas), fill_value=-1)
for i in range(52):
    conexiones[i][i] = 0

# CONEXIONES
# Linea Roja 9- 10-
conexiones[0][1] = 1530
conexiones[1][0] = 1530
conexiones[1][2] = 1800
conexiones[2][1] = 1800
conexiones[2][3] = 981
conexiones[3][2] = 981
conexiones[3][4] = 1010
conexiones[4][3] = 1010
conexiones[4][5] = 1960
conexiones[5][4] = 1960
conexiones[5][6] = 1420
conexiones[6][5] = 1420
conexiones[6][7] = 2170
conexiones[7][6] = 2170
conexiones[7][8] = 1100
conexiones[8][7] = 1100
conexiones[8][9] = 805
conexiones[9][8] = 805
conexiones[9][10] = 588
conexiones[9][39] = heuristica[9][39]
conexiones[10][9] = 588
conexiones[10][11] = 1790
conexiones[10][25] = heuristica[10][25]
conexiones[11][10] = 1790
conexiones[11][12] = 900
conexiones[12][11] = 900
conexiones[12][13] = 1340
conexiones[13][12] = 1340
conexiones[13][14] = 1640
conexiones[14][13] = 1640
conexiones[14][15] = 1150
conexiones[15][14] = 1150
conexiones[15][16] = 1310
conexiones[16][15] = 1310
conexiones[16][17] = 1210
conexiones[17][16] = 1210

# Linea Azul 25- 26-
conexiones[18][19] = 1170
conexiones[19][18] = 1170
conexiones[19][20] = 1190
conexiones[20][19] = 1190
conexiones[20][21] = 1720
conexiones[21][20] = 1720
conexiones[21][22] = 1460
conexiones[22][21] = 1460
conexiones[22][23] = 1200
conexiones[23][22] = 1200
conexiones[23][24] = 992
conexiones[24][23] = 992
conexiones[24][25] = 1330
conexiones[25][24] = 1330
conexiones[25][26] = 1050
conexiones[25][10] = heuristica[10][25]
conexiones[26][25] = 1050
conexiones[26][27] = 1080
conexiones[26][40] = heuristica[26][40]
conexiones[27][26] = 1080
conexiones[27][28] = 1130
conexiones[28][27] = 1130
conexiones[28][29] = 882
conexiones[29][28] = 882
conexiones[29][30] = 1220
conexiones[30][29] = 1220
conexiones[30][31] = 1050
conexiones[31][30] = 1050
conexiones[31][32] = 1490
conexiones[32][31] = 1490
conexiones[32][33] = 1510
conexiones[33][32] = 1510
conexiones[33][34] = 927
conexiones[34][33] = 927
conexiones[34][35] = 1480
conexiones[35][34] = 1480

# Linea Verde 39- 40-
conexiones[36][37] = 1370
conexiones[37][36] = 1370
conexiones[37][38] = 2980
conexiones[38][37] = 2980
conexiones[38][39] = 3130
conexiones[39][38] = 3130
conexiones[39][40] = 743
conexiones[39][9] = heuristica[9][39]
conexiones[40][39] = 743
conexiones[40][41] = 943
conexiones[40][26] = heuristica[26][40]
conexiones[41][40] = 943
conexiones[41][42] = 1240
conexiones[42][41] = 1240
conexiones[42][43] = 1270
conexiones[43][42] = 1270
conexiones[43][44] = 1950
conexiones[44][43] = 1950
conexiones[44][45] = 3380
conexiones[45][44] = 3380
conexiones[45][46] = 856
conexiones[46][45] = 856
conexiones[46][47] = 1350
conexiones[47][46] = 1350
conexiones[47][48] = 1290
conexiones[48][47] = 1290
conexiones[48][49] = 1100
conexiones[49][48] = 1100
conexiones[49][50] = 1300
conexiones[50][49] = 1300
conexiones[50][51] = 1070
conexiones[51][50] = 1070


# 1.-Sacar un elemento de la lista abierta (el primero), (si esta vacia fallo del algorimo)
# 2.-Comprobar si es la meta
# 3.1-si lo es -> FIN,
# 3.2-si no lo es -> Pasarlo a la lista cerrada y a√±adir sus hijos a la lista abierta
# 4 -> Volver a 1


def init(meta1, paradas_i):
    for ind in range(52):
        x = heuristica[meta1][ind]
        if x < 0:
            x = heuristica[ind][meta1]
        n = nodo(ind, -1, x, nombre_paradas[cod_paradas[ind]])
        paradas_i.append(n)


def add_abiertos(abiertos_a, cerrados_a, id_a, distancia_a, padre_a, paradas_a):
    if cerrados_a.get(id_a) is not None:
        return
    added = False
    encontrado = False
    i_a = 0
    len_a = abiertos_a.__len__()
    v = paradas_a[padre_a.key].g + distancia_a + paradas_a[id_a].h
    while i_a < len_a and not encontrado:
        aux_a = abiertos_a[i_a]
        if aux_a.key == id_a:
            added = True
            encontrado = True
            if aux_a.value > v:
                added = False
                abiertos_a.pop(i_a)
        i_a += 1
    len_a = abiertos_a.__len__()
    i_a = 0
    while i_a < len_a and not added:
        aux_a = abiertos_a[i_a]
        if aux_a.value > v:
            paradas_a[id_a].g = paradas_a[padre_a.key].g + distancia_a
            paradas_a[id_a].total = paradas_a[id_a].g + paradas_a[id_a].h
            paradas_a[id_a].id_padre = padre_a.key
            abiertos_a.insert(i_a, pair(id_a, v))
            added = True
        i_a += 1
    if not added:
        paradas_a[id_a].g = paradas_a[padre_a.key].g + distancia_a
        paradas_a[id_a].total = paradas_a[id_a].g + paradas_a[id_a].h
        paradas_a[id_a].id_padre = padre_a.key
        abiertos_a.append(pair(id_a, v))


# TODO: Valores de retorno
def algoritmo_rec(abiertos_r, cerrados_r, meta_r, x, paradas_r):
    if abiertos_r.__len__() == 0:
        return "FALLO"
    nodo_aux = abiertos_r.pop(0)
    cerrados_r.setdefault(nodo_aux.key, nodo_aux.value)
    if nodo_aux.key == meta_r:
        return "EXITO"
    for i_r in range(52):
        distancia = conexiones[nodo_aux.key][i_r]
        if distancia > 0:
            add_abiertos(abiertos_r, cerrados_r, i_r, distancia, nodo_aux, paradas_r)
    return algoritmo_rec(abiertos_r, cerrados_r, meta_r, x + 1, paradas_r)


def algoritmo(inicio_a, meta_a, paradas_a):
    abiertos = []
    cerrados = {}
    paradas_a[inicio_a].id_padre = -2
    paradas_a[inicio_a].total = paradas_a[inicio_a].h
    paradas_a[inicio_a].g = 0
    abiertos.append(pair(inicio_a, paradas_a[inicio_a].total))
    return algoritmo_rec(abiertos, cerrados, meta_a, 1, paradas_a)


def reconstruirCamino(id_rc, paradas_re, aux_return, color):
    if paradas_re[id_rc].id_padre == -2:
        # return nombre_paradas[cod_paradas[id]]
        return str(cod_paradas[id_rc])
    if paradas_re[id_rc].id_padre == -1:
        print("ERROR")
        return "ERROR"
    else:
        aux_return.n_p += 1
        if color != paradas_re[paradas_re[id_rc].id_padre].color:
            aux_return.n_t += 1
            color = paradas_re[paradas_re[id_rc].id_padre].color
        res = reconstruirCamino(paradas_re[id_rc].id_padre, paradas_re, aux_return, color) + "-" + str(
            cod_paradas[id_rc])
    return res


def reconstruirCaminoN(id_rc, paradas_re):
    if paradas_re[id_rc].id_padre == -2:
        return nombre_paradas[cod_paradas[id_rc]]
    if paradas_re[id_rc].id_padre == -1:
        print("ERROR")
        return "ERROR"
    else:
        res2 = reconstruirCaminoN(paradas_re[id_rc].id_padre, paradas_re) + "-" + nombre_paradas[cod_paradas[id_rc]]
    return res2

def main():
    inicio = -1
    meta = -1

    while not (0 <= inicio <= 51 and 0 <= meta <= 51):
        inicio = input("Da un numero del 0 al 51 para el inicio \n")
        inicio = int(inicio)

        meta = input("Da un numero del 0 al 51 para la meta \n")
        meta = int(meta)

        if not (0 <= inicio <= 51 and 0 <= meta <= 51):
            print("Error al introducir los datos por favor introduzcalos de nuevo")

    paradas_g = []
    init(meta, paradas_g)

    algoritmo(inicio, meta, paradas_g)

    for i in range(52):
        # if paradas_g[i].id_padre != -1:
        print(f" Parada = {i} - Padre = {paradas_g[i].id_padre} - Total  ={paradas_g[i].total}")

    aux = aux_ret()

    print(reconstruirCamino(meta, paradas_g, aux, -1))
    print(reconstruirCaminoN(meta, paradas_g))
    print(aux.n_p)
    print(aux.n_t)
